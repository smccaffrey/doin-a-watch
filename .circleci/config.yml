version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  build_and_test: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/doin-a-watch
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7.4-buster
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          # DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            python -m venv venv
            . venv/bin/activate
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      #- run:
      #    command: | # cd ~/maps-api
      #      pipenv run python
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: tr1
  build_base_image:
    working_directory: ~/doin-a-watch
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "doin-a-watch"
      - GOOGLE_PROJECT_ID: "main-245316"
    steps:
      # - checkout
      # - run:
      #     name: Setup Google Cloud SDK
      #     command: |
      #       apt-get install -qq -y gettext
      #       echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      #       gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      #       gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      #       gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      #       gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          command: |
            ls -a
      - run:
          name: Docker build and push

          command: |
            docker build \
                --build-arg COMMIT_REF=${CIRCLE_SHA1} \
                --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
                -t ${PROJECT_NAME} .
            docker tag ${PROJECT_NAME} us.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us.gcr.io
            docker push us.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
workflows:
  version: 2
  build_and_store:
    jobs:
      - build_and_test
      - build_base_image:
          requires:
            - build_and_test
          # requires:
          #   - build_and_test
          # filters:
          #   branches:
          #     only: master